@model ICollection<BillSlicer.Models.Product>

@{
    ViewBag.Title = "Add to receipt";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>AddTo</h2>

<p>
    @Html.ActionLink("Create New", "Add", "Products")
</p>
<script>

    receiptConfig = {
        id: '@ViewBag.ReceiptId'
    };

    productConfig = {
        selected: false,

        autoCompleteConfig: {
            
            source: '/Products/Search',
            filter: function (item) {
                return !productConfig.idMap.hasOwnProperty(item.id);
            },

            selector: '#new-row-name',
            listeners: {

                select: function (event, obj) {
                    $.get({
                        url: '/Products/Details/' + obj.item.id,
                        success: function (data, success) {
                            $('#new-row-price').text(data.data.price);
                            $('#new-row-description').text(data.data.description || '');
                            window.productConfig.selected = true;
                            window.productConfig.data = data.data
                        }
                    })
                },

                search: function () {
                    productConfig.idMap = {};
                    $("#product-table input[type=hidden]").each(function (index, element) {
                        productConfig.idMap[element.value] = true;
                    })
                }

            }
        }

    };

    productActions = {

        nameInputChanged: function() {
            BillSlicer.autocomplete(productConfig.autoCompleteConfig);
        },

        clear: function () {
            productConfig.selected = false;
            $('#new-row-price').text('');
            $('#new-row-description').text('');
            $('#new-row-name').val('');
        },

        save: function () {
            if (productConfig.selected) {
                $.post({
                    url: '/Receipts/AddProduct/' + receiptConfig.id,
                    data: {
                        prodId: productConfig.data.id
                    },
                    success: function (data, success, response) {
                        if (response.status == 201) {
                            $('#new-row').before("<tr>" +
                                "<input type=\"hidden\"value=\"" + productConfig.data.id + "\">" +
                                "<td>" + productConfig.data.name + "</td>" +
                                "<td>" + productConfig.data.price + "</td>" +
                                "<td>" + (productConfig.data.description || '') + "</td>" +
                                "<td> <span class=\"spa-action\" onclick=\"productActions.remove(this)\">Delete</span></td>" +
                            "</tr>");
                            productActions.clear();
                        }
                    }
                })
            }
        },

        remove: function (el) {
    
            var productId = $(el).parent().parent().children("input[type=hidden]")[0].value;
            $.ajax({
                method: 'DELETE',
                url: '/Receipts/' + receiptConfig.id + '/DeleteProduct/' + productId,
                success: function () {
                    $(el).parent().parent().remove();
                },
                failure: function () {
                    
                }
            })

        }

    }
</script>

<table class="table" id="product-table">
    <tr>
        <th>Product name</th>
        <th>Price</th>
        <th>Description</th>
        <th>Actions</th>
    </tr>
    @foreach (var receipt in Model) {
    <tr>
        @Html.HiddenFor(x => receipt.ID)
        <td>
            @Html.DisplayTextFor(x => receipt.Name)
        </td>
        <td>
            @Html.DisplayTextFor(x => receipt.Price)
        </td>
        <td>
            @Html.DisplayTextFor(x => receipt.Description)
        </td>


    <td>
            <span class="spa-action" onclick="productActions.remove(this)">Delete</span>
        </td>
    </tr>
    }
    <tr id="new-row">
        <td>
            <div class="ui-widget">
                    
                <input type="text" id="new-row-name" 
                        oninput="productActions.nameInputChanged()"/>
            </div>
        </td>
        <td id="new-row-price">
        </td>
        <td id="new-row-description">
        </td>
        <td>
            <span class="spa-action" onclick="productActions.clear()">Clear</span> |

            <span class="spa-action" onclick="productActions.save()">Save</span>

            <!--<input class ="btn" value="save"/>-->
        </td>
            
    </tr>
</table>
<div class="col-md-offset-2 col-md-10">
</div>

   
